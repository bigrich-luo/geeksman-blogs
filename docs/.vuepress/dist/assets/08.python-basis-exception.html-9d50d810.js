import{_ as n,W as s,X as a,$ as e}from"./framework-337b4f40.js";const t={},p=e(`<p>在 Python 中，常见的基本错误有两类，即语法错误和异常。对于语法错误，应该在程序编写过程中尽量予以避免，在程序调试中消除。而异常是 Python 程序在运行过程中引发的错误，如果程序中引发了未进行处理的异常，程序就会由于异常而终止运行，只有为程序添加异常处理，才能使程序更具健壮性。</p><h2 id="_1-语法错误" tabindex="-1"><a class="header-anchor" href="#_1-语法错误" aria-hidden="true">#</a> 1. 语法错误</h2><p>语法错误是所有编程语言中都存在的一种常见错误，即程序的洗发不符合编程语言的规定。常见的语法错误有：</p><ol><li>拼写错误（SyntaxError、NameError），即 Python 语言中的关键字写错，变量名，函数名拼写错误等。</li><li>脚本程序不符合 Python 的语法规范，例如少了括号，冒号等，以及表达式书写错误等。</li><li>缩进错误，因为 Python 语法规定，以缩进作为程序的语法之一。一般来说，Python 标准的缩进是以 4 个空格或一个 Tab 作为一个缩进，但同一个程序或项目中应该统一使用同一种缩进风格</li></ol><h2 id="_2-异常的处理" tabindex="-1"><a class="header-anchor" href="#_2-异常的处理" aria-hidden="true">#</a> 2. 异常的处理</h2><p>异常是 Python 程序在运行过程中引发的错误。如果程序中引发了未进行处理的异常，脚本就会由于异常而终止运行。只有在程序中捕获这些异常，并进行相关的处理，才能使程序不会中断运行。</p><p>Python 中使用 try...except 语句来说处理异常，基本形式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
	<span class="token string">&#39;语句&#39;</span>	<span class="token comment"># 可能产生异常的语句</span>
<span class="token keyword">except</span>	<span class="token string">&#39;异常名 1&#39;</span>：	<span class="token comment"># 要处理的第一类异常</span>
	<span class="token string">&#39;语句&#39;</span>	<span class="token comment"># 异常的处理语句</span>
<span class="token keyword">except</span>	<span class="token string">&#39;异常名 1&#39;</span>：	<span class="token comment"># 要处理的第二类异常</span>
	<span class="token string">&#39;语句&#39;</span>	<span class="token comment"># 异常的处理语句</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>		  <span class="token comment"># 未触发异常，则执行该语句</span>
	<span class="token string">&#39;语句&#39;</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>	  <span class="token comment"># 始终执行该语句，一般为了达到释放资源等目的</span>
	<span class="token string">&#39;语句&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：else 语句在未引发异常情况下得到运行。</p><p>该语句的执行流程图如下：</p><figure><img src="https://gitee.com/geek-tech/typorapicgoimages1/raw/master/images/202211021050492.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首先，我们先演示一个最简单的案例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 函数名错误, print 误写成 printt</span>
printt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NameError: name &#39;printt&#39; is not defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用异常捕获</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 函数名错误, print 误写成 printt</span>
    printt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;捕获到了异常&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>在这里如果你把 <code>print(2)</code> 放到 try 里面，依然不执行，因为在 try语句块中，捕获到了异常，直接进入了 except 的异常语句块。</p><p>如果没有引发错误，可以使用 <code>else</code> 关键字来定义要执行的代码块：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 函数名错误, print 误写成 printt</span>
    printt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;捕获到了异常&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;未发现异常&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果指定了 <code>finally</code> 块，则无论 try 块是否引发错误，都会执行 finally 块。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 函数名错误, print 误写成 printt</span>
    printt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;捕获到了异常&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;未发现异常&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;try内容执行完毕&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 函数名错误, print 误写成 printt</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;捕获到了异常&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;未发现异常&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;try内容执行完毕&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-python-主要的内置异常及其处理" tabindex="-1"><a class="header-anchor" href="#_3-python-主要的内置异常及其处理" aria-hidden="true">#</a> 3. Python 主要的内置异常及其处理</h2><p>在 Python 中常见的异常都已经预定义好了，</p><table><thead><tr><th style="text-align:center;">异常名</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">AttributeError</td><td style="text-align:center;">调用不存在的方法引发的异常</td></tr><tr><td style="text-align:center;">EOFError</td><td style="text-align:center;">遇到文件末尾引发的异常</td></tr><tr><td style="text-align:center;">ImportError</td><td style="text-align:center;">导入模块出错引发的异常</td></tr><tr><td style="text-align:center;">IndexError</td><td style="text-align:center;">列表越界引发的异常</td></tr><tr><td style="text-align:center;">IOErro</td><td style="text-align:center;">I/O 操作引发的异常，如打开文件出错等</td></tr><tr><td style="text-align:center;">KeyError</td><td style="text-align:center;">使用字典中不存在的关键字引发的异常</td></tr><tr><td style="text-align:center;">NameError</td><td style="text-align:center;">使用不存在的变量名引发的异常</td></tr><tr><td style="text-align:center;">TabError</td><td style="text-align:center;">语句块缩进不正确引发的异常</td></tr><tr><td style="text-align:center;">ValueError</td><td style="text-align:center;">搜索列表中不存在的值引发的异常</td></tr><tr><td style="text-align:center;">ZeroDivisionError</td><td style="text-align:center;">除数为零引发的异常</td></tr></tbody></table><p>except 语句主要有以下几种用法：</p><table><thead><tr><th style="text-align:center;">语法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">except</td><td style="text-align:center;">捕获所有异常</td></tr><tr><td style="text-align:center;">except &#39;异常名&#39;</td><td style="text-align:center;">捕获指定异常</td></tr><tr><td style="text-align:center;">except (&#39;异常名 1&#39;，&#39;异常名 2&#39;)</td><td style="text-align:center;">捕获指定异常名1或异常名2</td></tr><tr><td style="text-align:center;">except &#39;异常名&#39; as &#39;替代值&#39;</td><td style="text-align:center;">捕获指定异常并用&#39;替代值&#39;代替</td></tr><tr><td style="text-align:center;">except (&#39;异常名 1&#39;，&#39;异常名 2&#39;) as &#39;替代值&#39;</td><td style="text-align:center;">捕获异常名1或异常名2并用&#39;替代值&#39;代替</td></tr></tbody></table><h2 id="_4-手动抛出异常" tabindex="-1"><a class="header-anchor" href="#_4-手动抛出异常" aria-hidden="true">#</a> 4. 手动抛出异常</h2><h3 id="_4-1-raise-语句" tabindex="-1"><a class="header-anchor" href="#_4-1-raise-语句" aria-hidden="true">#</a> 4.1. raise 语句</h3><p>上一小节中，所有的异常都是在程序运行中出现了错误而引发的异常，我们还可以在 Python 程序中使用 raise 语句来引发指定的异常，并向异常传递数据。</p><p>为了程序的需要，程序员还可以自定义新的异常类型，例如要求用户输入文本的长度有要求，则可以用 raise 引发异常，以确保文本输入的长度符合要求。</p><p>raise 的使用方式：</p><ul><li>raise 异常名</li><li>raise 异常名，附加数据</li><li>raise 类名</li></ul><p>使用 raise 可以抛出各种预定异常，即使程序在运行时根本不会引发该异常。</p><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 要求用户输入名字不超过 10 个字符</span>
name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的名字，不超过 10 个字：&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> NameError
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;程序执行结束&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 raise 抛出异常，同时捕获异常，因此程序运行不会中断。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 要求用户输入名字不超过 10 个字符</span>
    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的名字，不超过 10 个字：&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> NameError
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token keyword">except</span> NameError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;捕获了一个NameError&#39;</span><span class="token punctuation">)</span>
    
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;程序执行结束&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-assert-语句" tabindex="-1"><a class="header-anchor" href="#_4-2-assert-语句" aria-hidden="true">#</a> 4.2. assert 语句</h3><p>assert 语句的一般形式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>assert &#39;条件测试&#39;，&#39;异常附加数据&#39;		# 其中异常附加数据是可选的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>assert 语句是简化的 raise 语句，它引发异常的前提是其后面的条件测试为假。</p><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 要求用户输入名字不超过 10 个字符</span>
name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的名字，不超过 10 个字：&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;程序执行结束&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>assert 语句一般用于在程序开发时测试代码的有效性。比如某个变量值必须在一定范围内，而运行时得不到的值不符合要求，则引发该异常，对开发者予以提示。所以一般在程序开发中，不去捕获这个异常，而是让他中断程序。原因是这个程序中已经出现了问题，不应该继续运行。</p><h2 id="_5-自定义异常类" tabindex="-1"><a class="header-anchor" href="#_5-自定义异常类" aria-hidden="true">#</a> 5. 自定义异常类</h2><p>在 Python 中定义异常类不用从基础完全自己定义，只要通过继承 Exception 类来创建自己的异常类。异常类的定义和其他类没有区别，最简单的自定义异常类甚至可以只继承 Exception 类，类体为 pass 如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>	<span class="token comment"># 继承Exception类</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要异常类带有一定的提示信息，也可以重载 <code>__str__</code> 和 <code>__init__</code> 这两个方法。</p><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LengthError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;名字过长&#39;</span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>value


<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 要求用户输入名字不超过 10 个字符</span>
    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的名字，不超过 10 个字：&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> LengthError
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token keyword">except</span> LengthError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;捕获了一个LengthError&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;程序执行结束&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),i=[p];function l(c,o){return s(),a("div",null,i)}const d=n(t,[["render",l],["__file","08.python-basis-exception.html.vue"]]);export{d as default};
