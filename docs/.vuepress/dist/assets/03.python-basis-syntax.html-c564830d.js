import{_ as n,W as s,X as a,a1 as t}from"./framework-0436675f.js";const e={},p=t(`<h2 id="_1-代码注释" tabindex="-1"><a class="header-anchor" href="#_1-代码注释" aria-hidden="true">#</a> 1. 代码注释</h2><p>代码注释是程序中不可少的部分，但注释不是程序，<strong>不能被执行</strong>，只是对程序代码进行解释说明，既可以作为程序员之间交流的主要途径，也能方便作者自己以后阅读代码与维护代码，大大增强程序的可读性。</p><p>Python 中的注释有两种形式：</p><ol><li>单行注释，以 “#” 字符开始，同一行中其后的所有内容都视为注释，不论是什么都不会执行；</li><li>多行注释，用三个单引号&#39;&#39;&#39;或三个双引号&quot;&quot;&quot;将注释到内容包围起来。</li></ol><p>以下代码同时包含有这两种注释：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
    该程序段的功能是：
    判断变量a是奇数还是偶数
&quot;&quot;&quot;</span>

<span class="token comment"># 要求用户输入一个整数</span>
a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;输入一个整数：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 对变量 a 进行判断</span>
<span class="token keyword">if</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token comment"># 如果 a 对 2 取余值为 0，则输出偶数</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;偶数&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;奇数&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 如果 a % 2 不等于 0， 则输出偶数</span>
<span class="token comment"># print(&#39;结束&#39;)		# 此行为注释语句，不会执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：为了保证代码的可读性，<code>#</code>后面建议先添加一个空格，然后再编写相应的说明文字</p><h2 id="_2-变量" tabindex="-1"><a class="header-anchor" href="#_2-变量" aria-hidden="true">#</a> 2. 变量</h2><p>变量是存放数据值的容器，简单点说，就是在程序运行时，记录数据用的。</p><h2 id="_2-1-变量的定义方式" tabindex="-1"><a class="header-anchor" href="#_2-1-变量的定义方式" aria-hidden="true">#</a> 2.1. 变量的定义方式</h2><blockquote><p>变量名称 = 变量的值</p></blockquote><p>等号 &quot;=&quot; 在这里的意义，与数学里面的 &quot;=&quot; 不同，在这里是赋值运算符的意思，即将等号右侧的值，赋予左侧的变量名。</p><p>从形式上看，每个变量都拥有独一无二的名字，例如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>	<span class="token comment"># a 为变量名，1为变量值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从底层看，程序中的数据都要放在内存中，变量就是这块内存的名字。</p><p>Python 允许您在一行中为多个变量赋值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 一行声明多个变量</span>
x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;23&#39;</span>
<span class="token comment"># 打印结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;x的值是&#39;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;y的值是&#39;</span> <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;z的值是&#39;</span> <span class="token operator">+</span> z<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-变量命名规则" tabindex="-1"><a class="header-anchor" href="#_2-2-变量命名规则" aria-hidden="true">#</a> 2.2. 变量命名规则</h3><p>Python 变量命名规则有以下几种：</p><ul><li>变量名必须以字母或下划线字符开头</li><li>变量名称不能以数字开头</li><li>变量名只能包含字母数字字符和下划线（A-z、0-9 和 _）</li><li>变量名称区分大小写（age、Age 和 AGE 是三个不同的变量）</li></ul><p>Python 有三种常用的命名方法：</p><ol><li><p>下划线命名法</p><p>逻辑断点（单词）用的是下划线隔开，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lihua_name <span class="token operator">=</span> <span class="token string">&#39;梨花&#39;</span>
ruhua_name <span class="token operator">=</span> <span class="token string">&#39;如花&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>小驼峰命名法</p><p>除第一个单词之外，其他单词首字母大写，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lihuaName <span class="token operator">=</span> <span class="token string">&#39;梨花&#39;</span>
ruhuaName <span class="token operator">=</span> <span class="token string">&#39;如花&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>大驼峰命名法</p><p>相比小驼峰法，大驼峰法（即帕斯卡命名法）把第一个单词的首字母也大写了。常用于类名, 例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_2-3-变量名称不可使用关键字" tabindex="-1"><a class="header-anchor" href="#_2-3-变量名称不可使用关键字" aria-hidden="true">#</a> 2.3. 变量名称不可使用关键字</h3><p>Python中有一系列单词，称之为关键字。关键字在Python中都有特定用途，因此，我们不可以使用它们作为标识符。</p><figure><img src="https://gitee.com/geek-tech/typorapicgoimages1/raw/master/images/202210272323850.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-python-输入-输出" tabindex="-1"><a class="header-anchor" href="#_3-python-输入-输出" aria-hidden="true">#</a> 3. Python 输入/输出</h2><p>对于所有的程序，输入和输出是用户与程序进行交互的主要途径，也是 Python 中的内置函数（函数的概念，我们等到后面再讲）。通过输入程序能够获取程序运行所需的原始数据，通过输出程序能够将数据的处理结果输出，让用户了解运行结果。</p><h3 id="_3-1-输出函数-print" tabindex="-1"><a class="header-anchor" href="#_3-1-输出函数-print" aria-hidden="true">#</a> 3.1. 输出函数 print()</h3><p>在前面的内容中，我们一直都在使用输出函数 print()，我们也知道，Python 程序如果需要输出，就必须调用 print() 函数，基本形式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中参数的意义如下：</p><ul><li>value 是用户要输出的信息，后面的省略号表示可以有多个要输出的信息；</li><li>sep 是多个要输出信息之间的分隔符，其默认值为一个空格；</li><li>end 是一个 print() 函数中所有要输出信息之后添加的符号，默认值为换行符。</li></ul><p>还记得我们之前写的第一行代码吗？只有一句 <code>print(&#39;你好，PyCharm&#39;)</code></p><p>我们也可以写成，以下几种形式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span>，<span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PyCharm&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PyCharm&#39;</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-输入函数-input" tabindex="-1"><a class="header-anchor" href="#_3-2-输入函数-input" aria-hidden="true">#</a> 3.2. 输入函数 input()</h3><p>Python 程序如果需要输入，就必须调用其 input() 函数，基本形式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">[</span>提示语<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中的参数是可选的，即可以使用，也可以不使用。<strong>参数是用来提供用户输入的提示信息字符串</strong>。当用户输入程序所需要的数据时，就会以字符串的形式返回。</p><p>但是，我们应该输入存储用户输入的数据呢？这时候就需要用到上一小节学习的<strong>变量</strong>。</p><p>我们把 <code>input()</code>中的内容赋值给一个变量，然后打印即可，如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 输入名字</span>
name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的名字&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 打印用户输入的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：input() 函数获取的数据，都会转换成字符串的格式，因此，当我们输入数字或其他类型数据的时候，需要进行转换。这里你可能有疑问了，什么是字符串？什么是数据类型？请继续往下看。</p><h2 id="_4-数值类型" tabindex="-1"><a class="header-anchor" href="#_4-数值类型" aria-hidden="true">#</a> 4. 数值类型</h2><p><strong>数据类型</strong></p><p>在编程中，数据类型是一个重要的概念。</p><p>变量可以存储不同类型的数据，并且不同类型可以执行不同的操作。</p><p>在这些类别中，Python 默认拥有以下内置数据类型：</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>文本类型</td><td><code>str</code></td></tr><tr><td>数值类型</td><td><code>int（整数）</code>, <code>float（浮点数）</code>, <code>complex（复数）</code></td></tr><tr><td>序列类型</td><td><code>list(列表)</code>, <code>tuple(元组)</code></td></tr><tr><td>映射类型</td><td><code>dict(字典)</code></td></tr><tr><td>集合类型</td><td><code>set（集合）</code></td></tr><tr><td>布尔类型</td><td><code>bool(布尔)</code></td></tr></tbody></table><p>你可以使用 type() 函数获取任何对象的数据类型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 整数型 int</span>
var_int <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_int<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 浮点型 float</span>
var_float <span class="token operator">=</span> <span class="token number">1.1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_float<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 文本类型 str</span>
var_str <span class="token operator">=</span> <span class="token string">&#39;你好&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_str<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 列表 list</span>
var_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;这是啥&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_list<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 元组 tuple</span>
var_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;这是啥&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 字典 dict</span>
var_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 集合 set</span>
var_set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;这是啥&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_set<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 布尔值 bool</span>
var_bool <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>var_bool<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先要讲的是数值类型，数值类型包括<code>int（整数）</code>, <code>float（浮点数）</code>, <code>complex（复数）</code></p><h3 id="_4-1-int-整型" tabindex="-1"><a class="header-anchor" href="#_4-1-int-整型" aria-hidden="true">#</a> 4.1. int(整型)</h3><p>整数当然包括正整数，负数和零。Python 中整数还可以以几种不同的进制进行书写。</p><p><code>0</code>+<code>进制标志</code>+<code>数字</code>代表不同进制的数。进制标志有以下几种：</p><table><thead><tr><th style="text-align:center;">进制</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">八进制整数</td><td style="text-align:center;">0o[0O]数字, 例如：0o24, 0O24</td></tr><tr><td style="text-align:center;">十六进制整数</td><td style="text-align:center;">0x[0X]数字, 例如：0x3F, 0X3F</td></tr><tr><td style="text-align:center;">二进制整数</td><td style="text-align:center;">0b[0B]数字, 例如：0b101, 0B101</td></tr><tr><td style="text-align:center;">十进制</td><td style="text-align:center;">不带进制标志, 例如：1, 2, 3</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 二进制</span>
int_bin <span class="token operator">=</span> <span class="token number">0b100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>int_bin<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_bin<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 八进制</span>
int_oct <span class="token operator">=</span> <span class="token number">0o24</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>int_oct<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_oct<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 十六进制</span>
int_hex <span class="token operator">=</span> <span class="token number">0x3f</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>int_hex<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_hex<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：Python 默认会转换为十进制打印。</p><h3 id="_4-2-float-浮点型" tabindex="-1"><a class="header-anchor" href="#_4-2-float-浮点型" aria-hidden="true">#</a> 4.2. float(浮点型)</h3><p>浮点数就是常用的带小数的数。浮点数的书写除了一般形式(形如 <code>1.23</code>)，还有以下几种表示方法：</p><table><thead><tr><th style="text-align:center;">表示方法</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">小数部分为 0，可以不写</td><td style="text-align:center;">23.</td></tr><tr><td style="text-align:center;">整数部分为 0，可以不写</td><td style="text-align:center;">.098</td></tr></tbody></table><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 一般形式</span>
float_1 <span class="token operator">=</span> <span class="token number">1.23</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>float_1<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_1<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 小数部分为零，省略</span>
float_2 <span class="token operator">=</span> <span class="token number">23.</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>float_2<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_2<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 整数部分为 0，省略</span>
float_3 <span class="token operator">=</span> <span class="token number">.36</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>float_3<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_3<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-算术运算符" tabindex="-1"><a class="header-anchor" href="#_4-3-算术运算符" aria-hidden="true">#</a> 4.3. 算术运算符</h3><p>讲完数值类型了，接下来就需要了解一下，数值参与的运算符</p><table><thead><tr><th style="text-align:center;">算术运算符</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">**</td><td style="text-align:center;">乘方运算符</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘法</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">除法</td></tr><tr><td style="text-align:center;">//</td><td style="text-align:center;">地板除(整除)</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">取余</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">加法</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减法</td></tr><tr><td style="text-align:center;">|</td><td style="text-align:center;">位或</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">位异或</td></tr><tr><td style="text-align:center;">&amp;</td><td style="text-align:center;">位与</td></tr><tr><td style="text-align:center;">&lt;&lt;</td><td style="text-align:center;">左移</td></tr><tr><td style="text-align:center;">&gt;&gt;</td><td style="text-align:center;">右移</td></tr></tbody></table><p><code>|</code>,<code>^</code>,<code>&amp;</code>,<code>&lt;&lt;</code>,<code>&gt;&gt;</code>都是位运算符，要依据其二进制形式进行运算。</p><p>当同一个算式中含有多个运算符时，Python 会按照优先级进行运算，即先计算优先级高的，后计算优先级低的，同级的运算符则从左向右计算。</p><p>运算符优先级从高到低排列如下：</p><ul><li>**</li><li>*，/，%</li><li>+，-</li><li>|，^，&amp;，&lt;&lt;，&gt;&gt;</li></ul><p>在同一个算式中，你也可以使用括号<code>()</code>来修改运算符的优先级，即括号内的具有高优先级。因此，你不必强记运算符的优先级，在没有把握的情况下可以使用括号<code>()</code>。</p><h2 id="_5-字符串" tabindex="-1"><a class="header-anchor" href="#_5-字符串" aria-hidden="true">#</a> 5. 字符串</h2><p>在前面的内容中，我们已经不止一次的使用过字符串了。字符串主要用于存储和表示文本。Python 中的字符串通常由单引号，双引号，三个单引号或三个双引号包围的一串字符组成。</p><p>注意：单引号和双引号都应当是英文字符中的符号。</p><p>字符串中的字符可以包含数字，字母，中文字符，特殊符号，以及一些不可见的控制字符，如换行符，制表符等。例如以下都是字符串：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;abd&#39;</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;abc&#39;&#39;&#39;</span>
<span class="token string">&quot;2fd3.0+&quot;</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;124&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然都是字符串，那么这四种表示方法有什么区别与联系呢？</p><p>单引号字符串与双引号字符串本质上是相同的。但当字符串内含有单引号时，如果单引号字符串就会导致无法区分字符串内的单引号与字符串标志的单引号，就要使用转移字符串，如果用双引号字符串就可以在字符串中直接书写单引号即可。比如<code>&#39;abc&quot;124&quot;ef&#39;</code>。</p><p>三引号字符串可以由多行组成，单引号或双引号字符串则不行，当需要使用大段多行的字符串时就可以使用它。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;
This is a cat.
This is a dog.
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-字符串运算" tabindex="-1"><a class="header-anchor" href="#_5-1-字符串运算" aria-hidden="true">#</a> 5.1. 字符串运算</h3><p>在 Python 中字符串是可以使用<code>+</code>，<code>*</code>运算符进行运算的，</p><p><code>+</code>的作用是连接字符串；<code>*</code>就是单个字符串的多次连接，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 打印 &#39;aaa&#39; 与 &#39;123&#39; 相加的结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 结果为 &#39;aaa123&#39;</span>

<span class="token comment"># 打印 &#39;hello&#39; * 4 的结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment"># 结果为 &#39;hello hello hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-转义字符串" tabindex="-1"><a class="header-anchor" href="#_5-2-转义字符串" aria-hidden="true">#</a> 5.2. 转义字符串</h3><p>刚才我们提到了字符串中的字符可以包含数字，字母，中文字符，特殊符号，以及一些不可见的控制字符，如换行符，制表符等。那么什么是转义字符串呢？</p><p>Python中\\代表转义，在 Python 中如果要在字符串中包含控制字符或特殊含义的符号，就需要使用转义字符。常见的转义字符如下：</p><table><thead><tr><th style="text-align:center;">转义字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行符</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">制表符(Tab)</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">回车（Enter）</td></tr><tr><td style="text-align:center;"><code>\\\\</code></td><td style="text-align:center;"><code>\\</code>字符</td></tr><tr><td style="text-align:center;"><code>\\&#39;</code></td><td style="text-align:center;"><code>&#39;</code>单引号</td></tr><tr><td style="text-align:center;"><code>\\&quot;</code></td><td style="text-align:center;"><code>&quot;</code>双引号</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;abc\\n124&#39;</span>	<span class="token comment"># 包含一个换行符的字符串</span>
<span class="token string">&#39;abc\\&#39;2\\&#39;abc&#39;</span>	<span class="token comment"># 字符串中包含一个被单引号引起来的 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-原始字符串" tabindex="-1"><a class="header-anchor" href="#_5-3-原始字符串" aria-hidden="true">#</a> 5.3. 原始字符串</h3><p>在上一小节中提到字符串中可以包含有一些转义字符，但他们都是以<code>\\</code>开头，而当字符串中需要<code>\\</code>字符时就必须写成<code>\\\\</code>的形式，如果需要两个<code>\\\\</code>时，就必须写成<code>\\\\\\\\</code>的形式。Python 中有一种解决办法，可以不用写这么多个<code>\\</code>字符，那就要使用原始字符串。原始字符串就是在字符串前以 r 或 R 作为标志，如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;c:\\windows\\system&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是，在原始字符串中存在一个问题，原始字符串的末尾不能以<code>\\</code>结尾，如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>r&#39;c<span class="token punctuation">:</span>\\windows\\system\\&#39;<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-4-格式化字符串" tabindex="-1"><a class="header-anchor" href="#_5-4-格式化字符串" aria-hidden="true">#</a> 5.4. 格式化字符串</h3><p>在 Python 中，所有字符串中的字符顺序是不可变的，但是在某些情况下，比如输出时，可能又要根据不同的需要修改字符串的内容，这时，可使用 Python 的格式化字符串功能。Python 中有 3 种格式化字符串的方法</p><ol><li>使用占位符</li></ol><p>在 Python 中，可以在字符串中使用以 <code>%</code> 开头的字符，在程序中改变字符串中的内容，常用的格式化字符如下：</p><table><thead><tr><th style="text-align:center;">占位符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">%c</td><td style="text-align:center;">格式化字符及ASCII码</td></tr><tr><td style="text-align:center;">%f</td><td style="text-align:center;">格式化浮点数，可以指定小数点后面的精度，默认是小数点后 6 位</td></tr><tr><td style="text-align:center;">%d</td><td style="text-align:center;">格式化整数，也比较常用</td></tr><tr><td style="text-align:center;">%o</td><td style="text-align:center;">格式化无符号八进制数</td></tr><tr><td style="text-align:center;">%s</td><td style="text-align:center;">字符串的格式化，也是最常用的</td></tr><tr><td style="text-align:center;">%x</td><td style="text-align:center;">格式化无符号十六进制数，其中的字母小写</td></tr><tr><td style="text-align:center;">%X</td><td style="text-align:center;">格式化无符号十六进制数，其中的字母大写</td></tr><tr><td style="text-align:center;">%e</td><td style="text-align:center;">将整数、浮点数转换成科学计数法</td></tr><tr><td style="text-align:center;">%%</td><td style="text-align:center;">当字符串中存在格式化标志时，需要用 %% 表示一个百分号</td></tr></tbody></table><p>占位符 <code>%s %c %%</code> 的使用:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 最常用的占位符</span>
name<span class="token operator">=</span><span class="token string">&#39;小明&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%s的使用:&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字叫%s！&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字叫%4s！&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#右对齐</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字叫%-4s！&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#左对应</span>

<span class="token comment"># 由于在python中只有字符串这种类型，使用在这里%c只能表示ASCII码，并不能表示字符</span>
character<span class="token operator">=</span><span class="token number">56</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;c的使用:&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d在ASCII码中表示字母%c&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>character<span class="token punctuation">,</span>character<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># %%</span>
schedule<span class="token operator">=</span><span class="token number">99</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%%的使用:&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;当前下载进度为%d%%！&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于在 Python 中只有字符串这种类型，所以在 Python 中 %c 只能表示 ASCII 码，并不能表示字符.</p><p>占位符 <code>%d %o %x</code> 的使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>number<span class="token operator">=</span><span class="token number">18</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d使用十进制为:%d&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#十进制</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d使用八进制为:%o&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#八进制</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d使用十六进制为:%x&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#十六进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在表示八进制或者十六进制时想显示各进制的前缀时，在%后面加一个 <code>#</code> 就好：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>number<span class="token operator">=</span><span class="token number">200</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d使用八进制为:%#o&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d使用十六进制为:%#x&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>占位符 <code>%f %e</code> 的使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>height<span class="token operator">=</span><span class="token number">143.5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的身高有%f米&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">#默认情况</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的身高有%.1f米&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">#小数点保留1位</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%f使用科学记数法为：%e&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>使用 format 方法格式化输出:</p><p>不设置指定位置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;{}在{}玩了一天的{}&quot;</span>
data <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;网吧&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;LOL&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置指定名称</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;{name}在{Location}玩了一天的{game}&quot;</span>
data <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Location<span class="token operator">=</span><span class="token string">&quot;网吧&quot;</span><span class="token punctuation">,</span>game<span class="token operator">=</span><span class="token string">&quot;LOL&quot;</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置指定位置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;{2}在{0}玩了一天的{1}&quot;</span>
data <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;网吧&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;LOL&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: 指定位置是从 0 开始算起,而不是 1!</p></li><li><p>使用 f-string 格式化</p><p><code>f-string</code>是 python3.6 之后版本添加的，称之为字面量格式化字符串，用起来较前两种简单，形式也更简洁</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;小明&#39;</span>
place <span class="token operator">=</span> <span class="token string">&#39;网吧&#39;</span>
game <span class="token operator">=</span> <span class="token string">&#39;LOL&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">在</span><span class="token interpolation"><span class="token punctuation">{</span>place<span class="token punctuation">}</span></span><span class="token string">玩了一天的</span><span class="token interpolation"><span class="token punctuation">{</span>game<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_5-5-字符串处理函数" tabindex="-1"><a class="header-anchor" href="#_5-5-字符串处理函数" aria-hidden="true">#</a> 5.5. 字符串处理函数</h3><p>除了用运算符对字符串进行运算外，Python还提供了很多对字符串操作的函数，其中常用的字符串操作函数如下：</p><table><thead><tr><th style="text-align:center;">字符串操作</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">string.capitalize()</td><td style="text-align:center;">将字符串的第一个字母大写，其余字母小写</td></tr><tr><td style="text-align:center;">string.count()</td><td style="text-align:center;">获得字符串中某一子字符串的数目</td></tr><tr><td style="text-align:center;">string.find()</td><td style="text-align:center;">获得字符串中某一子字符串的起始位置，无则返回-1</td></tr><tr><td style="text-align:center;">string.isalnum()</td><td style="text-align:center;">检测字符串是否仅包含数字与字母</td></tr><tr><td style="text-align:center;">string.isalpha()</td><td style="text-align:center;">检测字符串是否仅包含字母</td></tr><tr><td style="text-align:center;">string.isdigit()</td><td style="text-align:center;">检测字符串是否仅包含数字</td></tr><tr><td style="text-align:center;">string.islower()</td><td style="text-align:center;">检测字符串是否仅包含字母小写</td></tr><tr><td style="text-align:center;">string.istitle()</td><td style="text-align:center;">检测字符串中的单词是否首字母大写</td></tr><tr><td style="text-align:center;">string.isupper()</td><td style="text-align:center;">检测字符串是否仅包含大写字母</td></tr><tr><td style="text-align:center;">string.join()</td><td style="text-align:center;">拼接字符串</td></tr><tr><td style="text-align:center;">string.lower()</td><td style="text-align:center;">将字符串全部转换为小写</td></tr><tr><td style="text-align:center;">string.split()</td><td style="text-align:center;">分割字符串</td></tr><tr><td style="text-align:center;">string.swapcase()</td><td style="text-align:center;">将字符串中大写字母转换为小写，小写字母转换为大写</td></tr><tr><td style="text-align:center;">string.title()</td><td style="text-align:center;">将字符串中的单词首字母大写</td></tr><tr><td style="text-align:center;">string.upper()</td><td style="text-align:center;">将字符串中全部字母转换为大写</td></tr><tr><td style="text-align:center;">len(string)</td><td style="text-align:center;">获取字符串长度</td></tr></tbody></table><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 声明变量 string_a 并赋值为 &#39;python&#39;</span>
string_a <span class="token operator">=</span> <span class="token string">&#39;hello, worlD!&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_a<span class="token punctuation">)</span>

<span class="token comment"># 获取 string_a 的长度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string_a<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 将 string_a 的首字母大写</span>
new_string_a <span class="token operator">=</span> string_a<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_string_a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_a<span class="token punctuation">)</span>

<span class="token comment"># 获得字符串中 &#39;o&#39; 的数目</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 获得字符串中 &#39;lo&#39; 的起始位置</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_a<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;lo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 将字符串中全部字母转换为大写</span>
string_a_upper <span class="token operator">=</span> string_a<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_a_upper<span class="token punctuation">)</span>

<span class="token comment"># 检测字符串是否仅包含大写字母</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_a<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_a_upper<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 用 &#39;,&#39; 分割字符串, 并用两个新变量来接收</span>
string_1<span class="token punctuation">,</span> string_2 <span class="token operator">=</span> string_a_upper<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_1<span class="token punctuation">,</span> string_2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-列表" tabindex="-1"><a class="header-anchor" href="#_6-列表" aria-hidden="true">#</a> 6. 列表</h2><p>列表是最常见的一种数据形式，它可以把大量的数据放在一起，可以对其进行集中处理。不仅可以方便地进行数据处理，还可以减少声明很多变量。</p><p>列表是以 <code>[]</code> 包围的数据集合，不同成员间以 <code>,</code> (半角符号)分隔。列表中可以包含任何数据类型，也可包含另一个列表。列表也可以通过序号来访问其中的成员。</p><p>列表的创建和基本使用如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个空列表的两种表达方式</span>
list_a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
list_b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">,</span> list_b<span class="token punctuation">)</span>

<span class="token comment"># 创建一个只有一个元素的列表</span>
list_c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_c<span class="token punctuation">)</span>

<span class="token comment"># 创建一个有三个元素的列表</span>
list_d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_d<span class="token punctuation">)</span>

<span class="token comment"># 访问列表 list_d 的第三个元素（序号为2）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 访问列表 list_d 的最后一个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_d<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_d<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list_d<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 访问列表 list_d 的第 2 到第 4 个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 列表支持加法运算</span>
list_ <span class="token operator">=</span> list_c <span class="token operator">+</span> list_d
<span class="token keyword">print</span><span class="token punctuation">(</span>list_e<span class="token punctuation">)</span>

<span class="token comment"># 列表也支持乘法运算</span>
list_f <span class="token operator">=</span> list_c <span class="token operator">*</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_f<span class="token punctuation">)</span>

<span class="token comment"># 创建一个包含列表元素的列表</span>
list_g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_g<span class="token punctuation">)</span>

<span class="token comment"># 创建一个二维列表</span>
list_h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_h<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="列表的操作函数" tabindex="-1"><a class="header-anchor" href="#列表的操作函数" aria-hidden="true">#</a> 列表的操作函数</h6><table><thead><tr><th style="text-align:center;">列表操作</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">list.append(x)</td><td style="text-align:center;">列表尾部追加成员 x</td></tr><tr><td style="text-align:center;">list.count(x)</td><td style="text-align:center;">返回列表中的参数出现的次数</td></tr><tr><td style="text-align:center;">list.extend(L)</td><td style="text-align:center;">向列表中追加另一个列表 L</td></tr><tr><td style="text-align:center;">list.index(x)</td><td style="text-align:center;">返回参数 x 在列表中的序号（x 不存在则报错）</td></tr><tr><td style="text-align:center;">list.insert(index, object)</td><td style="text-align:center;">向列表中指定位置(index)插入数据（object）</td></tr><tr><td style="text-align:center;">list.pop()</td><td style="text-align:center;">删除列表中尾部的成员并返回删除的成员</td></tr><tr><td style="text-align:center;">list.remove(x)</td><td style="text-align:center;">删除列表中的指定成员（有多个则只删除第一个），指定成员不存在则报错</td></tr><tr><td style="text-align:center;">list.reverse()</td><td style="text-align:center;">将列表中成员的顺序颠倒</td></tr><tr><td style="text-align:center;">list.sort()</td><td style="text-align:center;">将列表中成员排序（要求其成员可排序，否则报错）</td></tr></tbody></table><p>注意：列表元素的序号从 0 开始计数，即第一个元素的序号为 0。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个列表</span>
list_a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>

<span class="token comment"># 列表尾部追加元素 1</span>
list_a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>

<span class="token comment"># 统计 1 在列表中出现的次数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 列表后追加另一个列表所有元素</span>
list_a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>

<span class="token comment"># 元素 2 在列表中首次出现的序号</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 在序号 3 处插入元素 0</span>
list_a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>

<span class="token comment"># 返回并删除列表最后一个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 删除列表中的元素 1（仅删除第一个）</span>
list_a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>

<span class="token comment"># 列表内元素顺序颠倒</span>
list_a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>

<span class="token comment"># 对列表元素排序</span>
list_a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-元组" tabindex="-1"><a class="header-anchor" href="#_7-元组" aria-hidden="true">#</a> 7. 元组</h2><p>元组可以看成是一种特殊的列表，与列表不同的元组一旦建立就不能改变。既不能改变其中的数据项，也不能添加和删除数据项。因此，想让一组数据不能被改变就把他们放到一个元组中即可，并且任何企图修改元组的操作都会发生错误的。</p><p>元组的基本形式是以括号 <code>()</code> 括起来的数据元素，他可以通过序号来引用其中的元素。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个空元组的两种表达方式</span>
tuple_a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
tuple_b <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tuple_a<span class="token punctuation">,</span> tuple_b<span class="token punctuation">)</span>

<span class="token comment"># 创建只有一个元素的数组, 一定要加逗号, 否则会被认为是一个数值</span>
tuple_c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
tuple_d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tuple_c<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tuple_d<span class="token punctuation">)</span>

<span class="token comment"># 访问元组中第二个元素</span>
tuple_e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tuple_e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 获取元组长度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tuple_e<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-字典" tabindex="-1"><a class="header-anchor" href="#_8-字典" aria-hidden="true">#</a> 8. 字典</h2><p>字典是 Python 中比较特别的一类数据类型, 字典中每个成员是以<code>键(key) : 值(value)</code>对的形式存在。</p><p>字典用大括号<code>{}</code>包围, 以键值对的形式声明和存在的数据集合。与列表最大的不同在于字典是无序的，其成员位置只是象征性的，在字典中通过键来访问成员，而不能通过其位置来访问该成员。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 建立一个空字典的两种方式</span>
dict_a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
dict_b <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个正常的字典</span>
dict_c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>

<span class="token comment"># 用键名查询对应的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_c<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_c<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_c<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="字典操作函数" tabindex="-1"><a class="header-anchor" href="#字典操作函数" aria-hidden="true">#</a> 字典操作函数</h6><table><thead><tr><th style="text-align:center;">字典操作</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">dict.clear()</td><td style="text-align:center;">清空字典</td></tr><tr><td style="text-align:center;">dict.copy()</td><td style="text-align:center;">复制字典</td></tr><tr><td style="text-align:center;">dict.get(key, [default])</td><td style="text-align:center;">获得键 <code>key</code> 对应的值，不存在则返回default</td></tr><tr><td style="text-align:center;">dict.items()</td><td style="text-align:center;">获得由键和值组成的迭代器</td></tr><tr><td style="text-align:center;">dict.keys()</td><td style="text-align:center;">获得键的迭代器</td></tr><tr><td style="text-align:center;">dict.pop(k)</td><td style="text-align:center;">删除 <code>k:v</code>键值对</td></tr><tr><td style="text-align:center;">dict.update(dict_1)</td><td style="text-align:center;">从另一个字典更新成员，不存在则创建，存在则覆盖</td></tr><tr><td style="text-align:center;">dict.values()</td><td style="text-align:center;">获得值的迭代器</td></tr><tr><td style="text-align:center;">dict.fromkeys(iter, value)</td><td style="text-align:center;">以列表或元组中给定的键建立字典，默认值为value</td></tr><tr><td style="text-align:center;">dict.popitem()</td><td style="text-align:center;">从键盘中删除任一键值对并返回它</td></tr><tr><td style="text-align:center;">dict.setdefault(k, default)</td><td style="text-align:center;">若字典中存在 key 值为 k 的，则返回其对应的值；否则，在字典中建立一个k:default字典成员。</td></tr></tbody></table><p>示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个字典</span>
dict_d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_d<span class="token punctuation">)</span>

<span class="token comment"># 复制字典</span>
dict_e <span class="token operator">=</span> dict_d<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_e<span class="token punctuation">)</span>

<span class="token comment"># 获取 &#39;e&#39; 键对应的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;不存在&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 如果不存在则返回默认值</span>
<span class="token comment"># print(dict_d[&#39;e&#39;])  # 如果不存在则报错</span>

<span class="token comment"># 获取所有的 key</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 删除 &#39;a&#39;: 1 键值对</span>
dict_d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_d<span class="token punctuation">)</span>
<span class="token comment"># 使用关键字 del 删除键值对</span>
<span class="token keyword">del</span> dict_e<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_e<span class="token punctuation">)</span>

<span class="token comment"># 更新 &#39;b&#39;: 2</span>
dict_d<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_d<span class="token punctuation">)</span>
dict_d<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_d<span class="token punctuation">)</span>

<span class="token comment"># 清空字典</span>
dict_d<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_d<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-集合" tabindex="-1"><a class="header-anchor" href="#_9-集合" aria-hidden="true">#</a> 9. 集合</h2><p>集合是无序，无索引且不重复的集合。在 Python 中，集合用花括号 <code>{}</code> 编写。</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">add()</td><td style="text-align:left;">向集合添加元素。</td></tr><tr><td style="text-align:left;">clear()</td><td style="text-align:left;">删除集合中的所有元素。</td></tr><tr><td style="text-align:left;">copy()</td><td style="text-align:left;">返回集合的副本。</td></tr><tr><td style="text-align:left;">difference()</td><td style="text-align:left;">返回包含两个或更多集合之间差异的集合。</td></tr><tr><td style="text-align:left;">difference_update()</td><td style="text-align:left;">删除此集合中也包含在另一个指定集合中的项目。</td></tr><tr><td style="text-align:left;">discard()</td><td style="text-align:left;">删除指定项目。</td></tr><tr><td style="text-align:left;">intersection()</td><td style="text-align:left;">返回为两个其他集合的交集的集合。</td></tr><tr><td style="text-align:left;">intersection_update()</td><td style="text-align:left;">删除此集合中不存在于其他指定集合中的项目。</td></tr><tr><td style="text-align:left;">isdisjoint()</td><td style="text-align:left;">返回两个集合是否有交集。</td></tr><tr><td style="text-align:left;">issubset()</td><td style="text-align:left;">返回另一个集合是否包含此集合。</td></tr><tr><td style="text-align:left;">issuperset()</td><td style="text-align:left;">返回此集合是否包含另一个集合。</td></tr><tr><td style="text-align:left;">pop()</td><td style="text-align:left;">从集合中删除一个元素。</td></tr><tr><td style="text-align:left;">remove()</td><td style="text-align:left;">删除指定元素。</td></tr><tr><td style="text-align:left;">symmetric_difference()</td><td style="text-align:left;">返回具有两组集合的对称差集的集合。</td></tr><tr><td style="text-align:left;">symmetric_difference_update()</td><td style="text-align:left;">插入此集合和另一个集合的对称差集。</td></tr><tr><td style="text-align:left;">union()</td><td style="text-align:left;">返回包含集合并集的集合。</td></tr><tr><td style="text-align:left;">update()</td><td style="text-align:left;">用此集合和其他集合的并集来更新集合。</td></tr></tbody></table><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个空集合, 注意：创建空集合时不能使用 {}，会被认为是字典</span>
set_a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set_a<span class="token punctuation">)</span>

<span class="token comment"># 访问集合元素, 这里你会发现，集合中的元素不能重复</span>
set_b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span>

<span class="token comment"># 添加元素</span>
set_b<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span>

<span class="token comment"># 将另一个集合中的内容添加, 即合并两个集合</span>
set_c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>
set_b<span class="token punctuation">.</span>update<span class="token punctuation">(</span>set_c<span class="token punctuation">)</span>
set_b<span class="token punctuation">.</span>union<span class="token punctuation">(</span>set_c<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span>

<span class="token comment"># 删除集合中的元素, 注释：如果要删除的项目不存在，则 remove() 将引发错误。</span>
set_b<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span>
<span class="token comment"># 注释：如果要删除的项目不存在，则 discard() 不会引发错误</span>
set_b<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span>

<span class="token comment"># 获取集合的长度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-内置常量与运算符" tabindex="-1"><a class="header-anchor" href="#_10-内置常量与运算符" aria-hidden="true">#</a> 10. 内置常量与运算符</h2><p>在 Python 中，除了以上介绍的各种数据类型和数值运算符外，还有一些常用的内置常量与逻辑运算符，比较运算符</p><h3 id="_10-1-常用内置常量" tabindex="-1"><a class="header-anchor" href="#_10-1-常用内置常量" aria-hidden="true">#</a> 10.1. 常用内置常量</h3><p><code>None</code> 的意义即字面意义 &#39;无&#39;，常用来表示没有值的对象。</p><p>True(真) 与 False(假)，是 Python中的布尔数据类型，逻辑型数据</p><p>Python 中的逻辑假包括 False, None, 0, &quot;&quot;, {}, (), []，其余任何值都视为真</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_10-2-逻辑运算符" aria-hidden="true">#</a> 10.2. 逻辑运算符</h3><p>我们在中学时学习过命题的逻辑运算：与、或、非，在计算机科学中，其运算规则也是类似的（基本原理相同，但操作数与返回结果有所不同），Python也不例外。</p><p>Python 中逻辑运算符包括与 <code>and</code>，或 <code>or</code>，非 <code>not</code>, <code>is</code>, <code>in</code>。</p><p><code>not</code> 的运算对象只有一个，一般也称为一元运算符，其规则是非假即真。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>or</code> 或运算符，两个参与运算的对象有一个的逻辑值为真则返回真，两个都为假才返回假。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">or</span> b<span class="token punctuation">)</span>

c <span class="token operator">=</span> <span class="token boolean">False</span>
d <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">or</span> d<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>and</code> 与运算符，与 <code>or</code> 相反，两个参与运算的对象有一个的逻辑值为假则返回假，两个都为真才返回真。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">and</span> b<span class="token punctuation">)</span>

c <span class="token operator">=</span> <span class="token boolean">False</span>
d <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">and</span> d<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>is</code> 与 <code>is not</code>，又称为身份操作符，用于判断左右两侧对象是否为同一对象，相同则返回 True，不同则返回 False。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>in</code> 与 <code>not in</code>，又称为成员操作符，用于判断左侧对象是否存在与右侧对象中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 判断字符串中是否存在某个字符</span>
a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
b <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">in</span> b<span class="token punctuation">)</span>

<span class="token comment"># 判断列表，元组，集合中是否存在某个元素</span>
c <span class="token operator">=</span> <span class="token number">1</span>
d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">in</span> d<span class="token punctuation">)</span>

<span class="token comment"># 判断字典的键中是否存在某个元素</span>
e <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>e <span class="token keyword">in</span> f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-3-比较运算符" tabindex="-1"><a class="header-anchor" href="#_10-3-比较运算符" aria-hidden="true">#</a> 10.3. 比较运算符</h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">意义</th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:center;">相等</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">大于等于</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">小于等于</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">不等于</td></tr></tbody></table><p>这些运算符的意义与数学上相同，而且，Python 允许连续使用这些比较运算符，表示两个比较运算都成立结果才为真。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># 字符也是可以比较大小的，比较依据是ascii码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,168),l=[p];function c(i,o){return s(),a("div",null,l)}const u=n(e,[["render",c],["__file","03.python-basis-syntax.html.vue"]]);export{u as default};
